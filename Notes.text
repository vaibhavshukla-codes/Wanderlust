Note: Methods used in WanderLust:-
1: toLocaleString()
#mention in resume:-
We have Implemented a fullstack project using MVC FrameWork.
We have used Maps.(google maps api)(Haven't did)
We used Bootrap for styling 
-------------------------------------------------------------------------------------------------------------------------
#------------------------------Phase 1(part a)----------------------#
#Getting Started:-
1: Database Set UP
2: REST Apis for CRUD

#Model: Listing
1:title
2:description
3:image
4:price
5:location
6:country

#Index Route 
#Read: Show Rout
#Create: New & Create Route
#Update: Edit & Update Route
#Delete: Delete Route

#------------------------------Phase 1(part b)----------------------#
#What is EJS Mate.(search npm ejs mate).
#Creating NavBar.

#Styling Index
1rem = 16px


#----------------------------------Phase 1(part c)-----------------------------------#
<------------Form Validdations----->
#Frontend Validation:

Note: Bootrap form validation is a stadaradized form validation so it works same for all browsers.
It is of two types:-
1: Client side validation (frontend to backend)
3: Server side validation (db schema/ error handle)

>when we enter the data in the form, the browser and/or web server will check to see that the data is in the correct
 format and within the constriants set by the application.

>IN project Bootrap validation is used with it's js to manage it's class( class="needs-validation") in form of new.ejs.
>novalidate:In Bootstrap, the novalidate attribute is used in HTML forms to disable the browserâ€™s built-in form validation,

---->Success and Failure Text: 
>valid-feedback and invalid-feedback bootrap classes are used.

#Backend Validation:

<------------Custom Error Handler----->
I used app.use() to handle the error if any value type entered by user not matched to the database schema.
app.use((err, req, res, next) => {
    res.send("somthing went wrong!");
});


<------------Custom WrapAsync--------->
It is a better way of writing try-catch block.
>Created a folder utils and a file inside it named wrapAsync.js to handle error.
>It's a better and modular way to write code.

<------------Custom ExpressError--------->
I made a ExpressError class in  ExpressError.js inside utils folder to make Custom ExpressError.

// 404 Handler for Unmatched Routes
app.use((req, res, next) => {
    next(new ExpressError(404, "Page Not Found"));
});

<------------Error.ejs--------->
I made a error.ejs inside the views/listings/error.ejs to show error in a good manner to the user.
>Here i have used bootstrap alerts.

<%layout("/layouts/boilerplate")%>
<div class="row mt-3">
    <div class="alert alert-danger col-6 offset-3" role="alert">
       <h4 class="alert-heading"><%=message%></h4>
    </div>
</div>


<------------Validations for Schema--------->
>Here i have used joi schema validation library for checking that each field 
 of form to create a new listing is filled by user or not.

>joi is an npm package.

>>Middlware:-

//A custom Express middleware function 
const validateListing = (req, res, next) => {
    let { error } = listingSchema.validate(req.body);
    if (error) {
        let errMsg = error.details.map((el) => el.message).join(",");
        throw new ExpressError(400, errMsg);
    }
    else {
        next();
    }
}

-------------------------------------------------------------------------------------------------------------------------

#--------------------------------------------Phase 2(part a)-------------------------------------------#
<----------Handling Deletion----------->
Using Mongoose Middlware

>We can use 2 middlewares:
pre-run before the query is executed.
post-run after the query is executed.

>findByIdAndDelete() triggers findOneAndDelete() middleware .
>for findOneAndDelete() middleware we make a Mongoose Middlware to be triggerd by it.
>Mongoose Middlware can be a pre or post middleware.
>pre works before deletion.
>post works after deletion.


#Pre and Post Middleware:-
âœ… Pre and Post Middleware schema banane ke baad aur model banane se pehle likhna chahiye.

| Middleware | Kab chalta hai         | Kab use karein                                |
| ---------- | ---------------------- | --------------------------------------------- |
| `pre`      | Operation ke **pehle** | Data validate, modify ya log karna ho         |
| `post`     | Operation ke **baad**  | Cleanup, log, ya related data delete karna ho |


> Here one listing can be related to multiple reviews ( 1 to n relation).


<----------New Model: Reviews----------->
1: comment   -> String
2: rating    -> Number
3: createdAt -> Date, Time


<----------Create Reviews----------->
1: Setting up the Reviews Form
2: Submitting the form
  POST /listings/:id/reviews

<----------Validations for Reviews----------->
1: Client side validation (in form)(using bootstrap form validation by adding it's js (js/script.js)).
2: Server side validation (using joi)(using joi schema validation library).

>Bootstrap provides built-in support for client-side form validation.

<----------Render Reviews----------->
I will display client reviews on show listing page.(show.ejs).

<----------Adding Style----------->
We will show our reviews in bootstrap cards.

<----------Deleting Reviews----------->
Mongo $pull operator.
>$pull:-
the $pull operator removes from an existing array all instances of a value or values that match a specified condition.

<----------Deleting Listing----------->
Delete Middleware for reviews


#--------------------------------------------Phase 2(part b)-------------------------------------------#
Topics to Cover:-
1: Express Router
2: Cookies

1:Express Router:
Express Router are the way to orgniaze you Express Application such that your primary app.js file does not 
become bloated.

const router = express.Router(); // creates new router object.

>we use express router to make our app.js file clean and blaoting free that's why we make  
separated files for related routes at single place.


<--------------Restructuring Listings-------------->
app.use("/listings",listings);

<--------------Restructuring Reviews-------------->
app.use("/listings/:id/reviews",reviews);
router = express.Router({mergeParams:true});


<---------------------------------------Cookies------------------------------------------------>
#Web Cookies:-
>HTTP cookies are small blocks of data created by a web server while a user is browsing a website 
 and placed on the user's computer or other device by the user's web browser.

#How to send Cookies:-
>in Express

app.get("/setCookies",(req,res)=>{
    res.cookie("greet","namaste");
    res.cookie("origin","india");
    res.send("We sent you a cookie");
});

note: Cookies are always stored as key-value pairs.


<--------------------------Cookie Parser------------------------------->
>cookie-parser package.
(it is an npm package and installed through npm)
>npm i cookie-parser.
>cookies are stored in req object.
>we get cookies from req.cookies.

const cookieParser = require("cookie-parser");
app.use(cookieParser());

app.get("/getCookies",(req,res)=>{
   console.dir(req.cookies);
   res.send("got cookies");
});

app.get("/getCookies",(req,res)=>{
    let {name = "anonymous"} = req.cookies;
    res.send(`Hi, ${name}`);
});

<--------------------------Signed Cookies------------------------------->
>Send Signed Cookie.
>Iska purpose hota hai ye ensure karna ki cookie ka data tamper (badla) nahi kiya gaya hai client side pe.

app.use(cookieParser("secretcode"));
app.get("getsignedcookie",(req,res)=>{
 res.cookie("color","red",{signed:true});
 res.send("Done!");
});

>Verify Signed Cookie.

app.get("/verify",(req,res)=>{
    res.send(req.singedCookies);
});

>express divides signed and unsigned cookies into two categories.
>req.cookies gives unsigned  cookies only.
>secretcode can be any string
> console.log(req.signedCookies)->if we made any changes in singedCookies then it will print {}.


#---------------------------------------------------Phase 2(part c)-------------------------------------------#
<----------What is State?-------------->
>Session: A single interaction between client and server is called Session.

1: Stateful Protocal: 
>Stateful protocol wo protocol hai jo previous interactions (state) ko yaad rakhta hai.
Isme server ko client ke bare me purani information yaad hoti hai, jaise login status, session details, etc.
ðŸ”¸Example: FTP (File Transfer Protocol), HTTP with Cookies/Session, Telnet

2: Stateless Protocal:
>Stateless protocol me server kisi bhi previous request ko yaad nahi rakhta. Har request independent hoti hai.
ðŸ”¸ Example: HTTP (by default), UDP


#Table:-
| Feature              | Stateful Protocol              | Stateless Protocol  |
| -------------------- | ------------------------------ | ------------------- |
| State maintain hoti? | Haan                           | Nahi                |
| Speed                | Thoda slow (zyada processing)  | Fast                |
| Memory use           | Zyada                          | Kam                 |
| Examples             | FTP, Telnet, HTTP with session | HTTP (default), UDP |


<----------------Express Sessions----------------->
An attempt to make our session stateful.
>it is an npm package (npm i express-session)
flow:-
client data -> save on server -> seession id save in cookie -> get session id from cookie.

ex: when  a user goes on amazon website then site makes a seesion id of the user's selected item,  
   and saves this seesion id on the user's web browser in the cookie, and amazon website can get again this seession id
   from the cookie to get the data of the user. 

>we store the user data in temporary storage(server side session storage,Memory Store but it is not recommended for production level)at amazon site(withour user login).
>Right now we are learing development, so we wiil only use Memory Store.
>For server side we use compatible session stores.
>Compatible session stores are usually NOT temporary.
>Compatible session stores provide persistent storage for session data â€” unlike 
 the default in-memory store â€” and are used to ensure data consistency and scalability in real-world app



#using npm package:
app.use(
    session({
        secret: "mysecretcodestring",
        resave: false,
        saveUninitialized: true
    })
);

note: 
1: "express-session" is an external Node.js module that provides middleware
    for managing sessions in an Express.js application.
2: cookie session connection id remains same in different pages/tabs but not for different browsers.


#Storing and Using Info:-
Tracking the session information.


<------------------------connect-flash----------------->
The flash is a special area of the session used for storing messages.
Messages are written to the flash and cleared after being displayed to the user.

>npm i connect-flash (it is an npm package)
>connect-flash comes temporarly once in the memory.
>You should place app.use(flash()) right after your session middleware:
>syntax:
req.flash('key', 'message');



#res.local
app.use((req,res,next)=>{
  res.locals.messages = req.flash("success");
  next();
});


<------------Using Sessions in project----------->

const sessionOptions = {
    secret: "mysupersecretcode",
    resave: false,
    saveUninitialized: true
}
app.use(session(sessionOptions));

#Adding Cookie Options.
const sessionOptions = {
    secret: "mysupersecretcode",
    resave: false,
    saveUninitialized: true,
    cookie: {
        expires: Date.now() + 1000*60*60*24*3,
        maxAge: 1000*60*60*24*3,
        httpOnly: true
    }
}

<------------Using Flash in Project----------->
app.use(session(sessionOptions));
app.use(flash());

app.use((req, res, next) => {
    res.locals.success = req.flash("success");
    next();
});

#Success Partial:-
In this i have added alert when operation performed like adding new listing,deleting listing, 
edit listing, adding and deleting reviews.

#Error Partial:-
It will show an alert if user want's to accesss deleted listing.(by using the id of deleted listing).



<-----------------------------------------------------------Phase 2(part d)-------------------------------------------------------->
#Authentication:-
>Authentication is the process of verifying who someone is.

#Authorization:-
>Authorization is the process of verifying what specific applications, files, and data a user has access to.

#Storing Passwords:-
>We never store the password as it is, we store their hashed form.

Password --> Hashing function ---> Hashed String
ex: "hello" --> Hashing function ---> "ad3034df030"

#Hashing:-
What we need to know ?

1: For every input, there is a fixed output.
2: They are one way functions, we can't get input from output.
3: For different input, there is a different output but of same length.
4: Small changes in input should bring large changes in output.

>Some Hashing functions:-
1: SHA256
2: MD5
3: CRC 
4: Becrypt

#Salting:-
Password Salting is a technique to protect passwords stored in databases by addding a string of 32 or
more characters and then hashing them.

ex: vaibhav@53 + %?@ = vaibhav@53%?@(salted string) ---> Hashing function ---> Hashed String.

#Passport:-
>Passport is Express-compatible authentication middleware for Node.js.
>Passport is a nodejs tool to perform salting, hashing and Authentication.
> go on https://www.passportjs.org/ 
1: npm i passport (passport as a library will be installed)
2: npm i passport-local (Passport strategy for authenticating with a username and password.)
3: npm i passport-local-mongoose (Passport-Local Mongoose is a Mongoose plugin that simplifies building username and password login with Passport)

#User Model:-
>user: username,password,email
>you are free to define your user how you like. Passport local-mongoose will add a username,hash and salt 
 field to store the username, the hashed password and the salt value.

 Additionally, Passport-Local Mongoose adds some methods to your Schema. See the API


#Configuring strategy:-
>passport.initialize()
A middleware that initializes passport.

>passport.seesion()
A web application needs the ability to identify users as they browse from page to page.
The series of requests and responses, each associated with the same user, is known as a session.

>passport.use(new LocalStrategy(User.authenticate()))


#Demo User:-
app.use("/demo", async (req, res) => {
    const fakeUser = new User({
        email: "student@gmail.com",
        username: "shukla ji"
    });
    let registeredUser = await User.register(fakeUser, "hellobhai");
    res.send(registeredUser);
});

#Signup User:-
GET /signup
POST /signup

#Login User:-
GET /login
POST /login

Home Work: Read passport documentation



<-----------------------------------------------------------Phase 2(part e)-------------------------------------------------------->
#Connecting Login Route:-
How to check if user is logged in?

req.isAuthenticated() //Passport method


#Logout User:-
GET /logout

//logout route
router.get("/logout", (req, res, next) => {
    req.logout((err) => {
        if (err) {
            return next(err);
        }
        req.flash("success", "you are logged out now!");
        res.redirect("/listings");
    });
});


#Add Styling:-
added sign up, login, logout functionaliteis in navbar.ejs(bootrap styling is applied)


#Login after SignUp:-
Passport's login method automatically establishes a login sesssion.
We can invoke login to automatically login a user.
>Aim: no need to login after signup.

req.login(registeredUser, (err) => {
 if (err) {
       return next(err);
   }
  req.flash("success", "Welcome to Wanderlust");
  res.redirect("/listings");
});


#post-login Page:-
note: passport doesn't have the access to delete res.locals variables.


#Listing Owner:-
>Added owner(reference taken from User collection) field in listing(in models/listing.js)
>we will add the req.user._id in listing.owner and we will use populate to spread all the field of owner.
> req.user is a fixed property name provided by Passport, not related to the name of your model.
Listing Authorization: Listing will be deleted and edited by it's owner only.
Review Authorization: Review will be deleted by it's owner only.


#Starting with Authorization:-
=>For Listings:
1: Hiding Delete and Edit button for the users which are not the owners of it.
> we will match listing owner to the user who wants to delete or edit.
> Also did server side validation so that no user can edit or delete by sending an api request.(using hopscotch or etc)

2: In update route:
  if (!listing.owner.equals(res.locals.currUser._id)) {
      req.flash("error", "You don't have permission to edit");
      return res.redirect(`/listings/${id}`);
 }

=>For Reviews:-
>Provided isLoggedIn middleware to router.post and router.delete in review.js so that only logged in users can 
add or delete reviews.
>Aslo added author field in models/review.js for making the author of every review.
>Added the name of author of each review in UI.
>Review will be deleted by it's author only.


<-----------------------------------------------------------Phase 3(part a)-------------------------------------------------------->
<------------------MVC FrameWork(mention in resume)------------------------------>
Ex: We have Implemented a fullstack project using MVC FrameWork.
#MVC: Model    View      Controller
      Datbase  Frontend  Backend

>Implement Design Pattern for Listings.

>Implement Design Pattern for Reviews and Users.
->moving callbacks to Controllers folder.



<----------Router.route--------->
A way to group together routes with different verbs but same paths.

<----------Re-style Ratings--------->
Used Rating library : starability from https://github.com/LunarLogic/starability



<----------------------------------Image Upload----------------------------------->
We can't uplaod images due to:-
1:send files
2:size limit
still we will overcome it.

>Flow:
form will capable of sending files-->
we will use thirdy party serivce to save images and take the link  of those images-->
we will save the link of images in our database(mongodb).


<----Manipulating form------>
enctype = "multipart/form-data"

<div class="mb-3">
  <label for="image" class="form-label">Upload Listing Image</label>
  <input name="listing[image]" type="file"  class="form-control">
</div>

#Multer:-
Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of busboy for maximum efficiency.
NOTE: Multer will not process any form which is not multipart (multipart/form-data)

#Cloud Setup:-
Cloudinary and .env file.
>we use dotenv library from npm to access .env file.

>Store files:
Multer Store Cloudinary

npm i Cloudinary multer-storage-cloudinary
>we are saving our data(images) on cloudinary.

>Save link in Mongo:-
Modify image in schema.


<-----------------------------------------------------------Phase 3(part b)-------------------------------------------------------->
#Edit Listing Image:-
>Edit Form
>Image Preview for Edit Page

#Getting started with Maps:-
>We will use MapBox.

#Image Preview:-

#Maps:-

#First Map:-

#Geocoding:-

#Storig Co-ordinates:-

#Map Marker:-

#Map Popup:-


<-----------------------------------------------------------Phase 3(part c)-------------------------------------------------------->
#Fixing Home Page:-

#Add UI for Filters:-
>Adding Filters

#Add UI for Tax Switch:-


#Making Tax Switch Functional:-

#Add UI for Search:-
