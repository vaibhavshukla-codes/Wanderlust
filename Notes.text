Note: Methods used in WanderLust:-

1: toLocaleString()

-------------------------------------------------------------------------------------------------------------------------
#------------------------------Phase 1(part a)----------------------#
#Getting Started:-
1: Database Set UP
2: REST Apis for CRUD

#Model: Listing
1:title
2:description
3:image
4:price
5:location
6:country

#Index Route 
#Read: Show Rout
#Create: New & Create Route
#Update: Edit & Update Route
#Delete: Delete Route

#------------------------------Phase 1(part b)----------------------#
#What is EJS Mate.(search npm ejs mate).
#Creating NavBar.

#Styling Index
1rem = 16px


#----------------------------------Phase 1(part c)-----------------------------------#
<------------Form Validdations----->
#Frontend Validation:

Note: Bootrap form validation is a stadaradized form validation so it works same for all browsers.
It is of two types:-
1: Client side validation (frontend to backend)
3: Server side validation (db schema/ error handle)

>when we enter the data in the form, the browser and/or web server will check to see that the data is in the correct
 format and within the constriants set by the application.

>IN project Bootrap validation is used with it's js to manage it's class( class="needs-validation") in form of new.ejs.
>novalidate:In Bootstrap, the novalidate attribute is used in HTML forms to disable the browserâ€™s built-in form validation,

---->Success and Failure Text: 
>valid-feedback and invalid-feedback bootrap classes are used.

#Backend Validation:

<------------Custom Error Handler----->
I used app.use() to handle the error if any value type entered by user not matched to the database schema.
app.use((err, req, res, next) => {
    res.send("somthing went wrong!");
});


<------------Custom WrapAsync--------->
It is a better way of writing try-catch block.
>Created a folder utils and a file inside it named wrapAsync.js to handle error.
>It's a better and modular way to write code.

<------------Custom ExpressError--------->
I made a ExpressError class in  ExpressError.js inside utils folder to make Custom ExpressError.

// 404 Handler for Unmatched Routes
app.use((req, res, next) => {
    next(new ExpressError(404, "Page Not Found"));
});

<------------Error.ejs--------->
I made a error.ejs inside the views/listings/error.ejs to show error in a good manner to the user.
>Here i have used bootstrap alerts.

<%layout("/layouts/boilerplate")%>
<div class="row mt-3">
    <div class="alert alert-danger col-6 offset-3" role="alert">
       <h4 class="alert-heading"><%=message%></h4>
    </div>
</div>


<------------Validations for Schema--------->
>Here i have used joi schema validation library for checking that each field 
 of form to create a new listing is filled by user or not.

>joi is an npm package.

>>Middlware:-

//A custom Express middleware function 
const validateListing = (req, res, next) => {
    let { error } = listingSchema.validate(req.body);
    if (error) {
        let errMsg = error.details.map((el) => el.message).join(",");
        throw new ExpressError(400, errMsg);
    }
    else {
        next();
    }
}

-------------------------------------------------------------------------------------------------------------------------

#--------------------------------------------Phase 2(part a)-------------------------------------------#
<----------Handling Deletion----------->
Using Mongoose Middlware

>We can use 2 middlewares:
pre-run before the query is executed.
post-run after the query is executed.

>findByIdAndDelete() triggers findOneAndDelete() middleware .
>for findOneAndDelete() middleware we make a Mongoose Middlware to be triggerd by it.
>Mongoose Middlware can be a pre or post middleware.
>pre works before deletion.
>post works after deletion.


#Pre and Post Middleware:-
âœ… Pre and Post Middleware schema banane ke baad aur model banane se pehle likhna chahiye.

| Middleware | Kab chalta hai         | Kab use karein                                |
| ---------- | ---------------------- | --------------------------------------------- |
| `pre`      | Operation ke **pehle** | Data validate, modify ya log karna ho         |
| `post`     | Operation ke **baad**  | Cleanup, log, ya related data delete karna ho |


> Here one listing can be related to multiple reviews ( 1 to n relation).


<----------New Model: Reviews----------->
1: comment   -> String
2: rating    -> Number
3: createdAt -> Date, Time


<----------Create Reviews----------->
1: Setting up the Reviews Form
2: Submitting the form
  POST /listings/:id/reviews

<----------Validations for Reviews----------->
1: Client side validation (in form)(using bootstrap form validation by adding it's js (js/script.js)).
2: Server side validation (using joi)(using joi schema validation library).

>Bootstrap provides built-in support for client-side form validation.

<----------Render Reviews----------->
I will display client reviews on show listing page.(show.ejs).

<----------Adding Style----------->
We will show our reviews in bootstrap cards.

<----------Deleting Reviews----------->
Mongo $pull operator.
>$pull:-
the $pull operator removes from an existing array all instances of a value or values that match a specified condition.

<----------Deleting Listing----------->
Delete Middleware for reviews


#--------------------------------------------Phase 2(part b)-------------------------------------------#
Topics to Cover:-
1: Express Router
2: Cookies

1:Express Router:
Express Router are the way to orgniaze you Express Application such that your primary app.js file does not 
become bloated.

const router = express.Router(); // creates new router object.

>we use express router to make our app.js file clean and blaoting free that's why we make  
separated files for related routes at single place.


<--------------Restructuring Listings-------------->
app.use("/listings",listings);

<--------------Restructuring Reviews-------------->
app.use("/listings/:id/reviews",reviews);
router = express.Router({mergeParams:true});


<---------------------------------------Cookies------------------------------------------------>
#Web Cookies:-
>HTTP cookies are small blocks of data created by a web server while a user is browsing a website 
 and placed on the user's computer or other device by the user's web browser.

#How to send Cookies:-
>in Express

app.get("/setCookies",(req,res)=>{
    res.cookie("greet","namaste");
    res.cookie("origin","india");
    res.send("We sent you a cookie");
});

note: Cookies are always stored as key-value pairs.


<--------------------------Cookie Parser------------------------------->
>cookie-parser package.
(it is an npm package and installed through npm)
>npm i cookie-parser.
>cookies are stored in req object.
>we get cookies from req.cookies.

const cookieParser = require("cookie-parser");
app.use(cookieParser());

app.get("/getCookies",(req,res)=>{
   console.dir(req.cookies);
   res.send("got cookies");
});

app.get("/getCookies",(req,res)=>{
    let {name = "anonymous"} = req.cookies;
    res.send(`Hi, ${name}`);
});

<--------------------------Signed Cookies------------------------------->
>Send Signed Cookie.
>Iska purpose hota hai ye ensure karna ki cookie ka data tamper (badla) nahi kiya gaya hai client side pe.

app.use(cookieParser("secretcode"));
app.get("getsignedcookie",(req,res)=>{
 res.cookie("color","red",{signed:true});
 res.send("Done!");
});

>Verify Signed Cookie.

app.get("/verify",(req,res)=>{
    res.send(req.singedCookies);
});

>express divides signed and unsigned cookies into two categories.
>req.cookies gives unsigned  cookies only.
>secretcode can be any string
> console.log(req.signedCookies)->if we made any changes in singedCookies then it will print {}.


#---------------------------------------------------Phase 2(part c)-------------------------------------------#
<----------What is State?-------------->
>Session: A single interaction between client and server is called Session.

1: Stateful Protocal: 
>Stateful protocol wo protocol hai jo previous interactions (state) ko yaad rakhta hai.
Isme server ko client ke bare me purani information yaad hoti hai, jaise login status, session details, etc.
ðŸ”¸Example: FTP (File Transfer Protocol), HTTP with Cookies/Session, Telnet

2: Stateless Protocal:
>Stateless protocol me server kisi bhi previous request ko yaad nahi rakhta. Har request independent hoti hai.
ðŸ”¸ Example: HTTP (by default), UDP


#Table:-
| Feature              | Stateful Protocol              | Stateless Protocol  |
| -------------------- | ------------------------------ | ------------------- |
| State maintain hoti? | Haan                           | Nahi                |
| Speed                | Thoda slow (zyada processing)  | Fast                |
| Memory use           | Zyada                          | Kam                 |
| Examples             | FTP, Telnet, HTTP with session | HTTP (default), UDP |


<----------------Express Sessions----------------->
An attempt to make our session stateful.
>it is an npm package (npm i express-session)
flow:-
client data -> save on server -> seession id save in cookie -> get session id from cookie.

ex: when  a user goes on amazon website then site makes a seesion id of the user's selected item,  
   and saves this seesion id on the user's web browser in the cookie, and amazon website can get again this seession id
   from the cookie to get the data of the user. 

>we store the user data in temporary storage(server side session storage,Memory Store but it is not recommended for production level)at amazon site(withour user login).
>Right now we are learing development, so we wiil only use Memory Store.
>For server side we use compatible session stores.
>Compatible session stores are usually NOT temporary.
>Compatible session stores provide persistent storage for session data â€” unlike 
 the default in-memory store â€” and are used to ensure data consistency and scalability in real-world app



#using npm package:
app.use(
    session({
        secret: "mysecretcodestring",
        resave: false,
        saveUninitialized: true
    })
);

note: 
1: "express-session" is an external Node.js module that provides middleware
    for managing sessions in an Express.js application.
2: cookie session connection id remains same in different pages/tabs but not for different browsers.


#Storing and Using Info:-
Tracking the session information.


<------------------------connect-flash----------------->
The flash is a special area of the session used for storing messages.
Messages are written to the flash and cleared after being displayed to the user.

>npm i connect-flash (it is an npm package)
>connect-flash comes temporarly once in the memory.
>You should place app.use(flash()) right after your session middleware:
>syntax:
req.flash('key', 'message');



#res.local
app.use((req,res,next)=>{
  res.locals.messages = req.flash("success");
  next();
});


<------------Using Sessions in project----------->

const sessionOptions = {
    secret: "mysupersecretcode",
    resave: false,
    saveUninitialized: true
}
app.use(session(sessionOptions));

#Adding Cookie Options.
const sessionOptions = {
    secret: "mysupersecretcode",
    resave: false,
    saveUninitialized: true,
    cookie: {
        expires: Date.now() + 1000*60*60*24*3,
        maxAge: 1000*60*60*24*3,
        httpOnly: true
    }
}

<------------Using Flash in Project----------->
app.use(session(sessionOptions));
app.use(flash());

app.use((req, res, next) => {
    res.locals.success = req.flash("success");
    next();
});

#Success Partial:-
In this i have added alert when operation performed like adding new listing,deleting listing, 
edit listing, adding and deleting reviews.

#Error Partial:-
It will show an alert if user want's to accesss deleted listing.(by using the id of deleted listing).