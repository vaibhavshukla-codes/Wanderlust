Note: Methods used in WanderLust:-

1: toLocaleString()

-------------------------------------------------------------------------------------------------------------------------
#------------------------------Phase 1(part a)----------------------#
#Getting Started:-
1: Database Set UP
2: REST Apis for CRUD

#Model: Listing
1:title
2:description
3:image
4:price
5:location
6:country

#Index Route 
#Read: Show Rout
#Create: New & Create Route
#Update: Edit & Update Route
#Delete: Delete Route

#------------------------------Phase 1(part b)----------------------#
#What is EJS Mate.(search npm ejs mate).
#Creating NavBar.

#Styling Index
1rem = 16px


#----------------------------------Phase 1(part c)-----------------------------------#
<------------Form Validdations----->
#Frontend Validation:

Note: Bootrap form validation is a stadaradized form validation so it works same for all browsers.
It is of two types:-
1: Client side validation (frontend to backend)
3: Server side validation (db schema/ error handle)

>when we enter the data in the form, the browser and/or web server will check to see that the data is in the correct
 format and within the constriants set by the application.

>IN project Bootrap validation is used with it's js to manage it's class( class="needs-validation") in form of new.ejs.
>novalidate:In Bootstrap, the novalidate attribute is used in HTML forms to disable the browser’s built-in form validation,

---->Success and Failure Text: 
>valid-feedback and invalid-feedback bootrap classes are used.

#Backend Validation:

<------------Custom Error Handler----->
I used app.use() to handle the error if any value type entered by user not matched to the database schema.
app.use((err, req, res, next) => {
    res.send("somthing went wrong!");
});


<------------Custom WrapAsync--------->
It is a better way of writing try-catch block.
>Created a folder utils and a file inside it named wrapAsync.js to handle error.
>It's a better and modular way to write code.

<------------Custom ExpressError--------->
I made a ExpressError class in  ExpressError.js inside utils folder to make Custom ExpressError.

// 404 Handler for Unmatched Routes
app.use((req, res, next) => {
    next(new ExpressError(404, "Page Not Found"));
});

<------------Error.ejs--------->
I made a error.ejs inside the views/listings/error.ejs to show error in a good manner to the user.
>Here i have used bootstrap alerts.

<%layout("/layouts/boilerplate")%>
<div class="row mt-3">
    <div class="alert alert-danger col-6 offset-3" role="alert">
       <h4 class="alert-heading"><%=message%></h4>
    </div>
</div>


<------------Validations for Schema--------->
>Here i have used joi schema validation library for checking that each field 
 of form to create a new listing is filled by user or not.

>joi is an npm package.

>>Middlware:-

//A custom Express middleware function 
const validateListing = (req, res, next) => {
    let { error } = listingSchema.validate(req.body);
    if (error) {
        let errMsg = error.details.map((el) => el.message).join(",");
        throw new ExpressError(400, errMsg);
    }
    else {
        next();
    }
}

-------------------------------------------------------------------------------------------------------------------------

#--------------------------------------------Phase 2(part a)-------------------------------------------#
<----------Handling Deletion----------->
Using Mongoose Middlware

>We can use 2 middlewares:
pre-run before the query is executed.
post-run after the query is executed.

>findByIdAndDelete() triggers findOneAndDelete() middleware .
>for findOneAndDelete() middleware we make a Mongoose Middlware to be triggerd by it.
>Mongoose Middlware can be a pre or post middleware.
>pre works before deletion.
>post works after deletion.


#Pre and Post Middleware:-
✅ Pre and Post Middleware schema banane ke baad aur model banane se pehle likhna chahiye.

| Middleware | Kab chalta hai         | Kab use karein                                |
| ---------- | ---------------------- | --------------------------------------------- |
| `pre`      | Operation ke **pehle** | Data validate, modify ya log karna ho         |
| `post`     | Operation ke **baad**  | Cleanup, log, ya related data delete karna ho |


> Here one listing can be related to multiple reviews ( 1 to n relation).


<----------New Model: Reviews----------->
1: comment   -> String
2: rating    -> Number
3: createdAt -> Date, Time


<----------Create Reviews----------->
1: Setting up the Reviews Form
2: Submitting the form
  POST /listings/:id/reviews

<----------Validations for Reviews----------->
1: Client side validation (in form)(using bootstrap form validation by adding it's js (js/script.js)).
2: Server side validation (using joi)(using joi schema validation library).

>Bootstrap provides built-in support for client-side form validation.

<----------Render Reviews----------->
I will display client reviews on show listing page.(show.ejs).

<----------Adding Style----------->
We will show our reviews in bootstrap cards.

<----------Deleting Reviews----------->
Mongo $pull operator.
>$pull:-
the $pull operator removes from an existing array all instances of a value or values that match a specified condition.

<----------Deleting Listing----------->
Delete Middleware for reviews
